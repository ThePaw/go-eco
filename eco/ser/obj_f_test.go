package ser

import (
	"fmt"
	"math"
	"testing"
)

func TestG2Gain(t *testing.T) {
	fmt.Println("TestG2Gain() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := -8.0
	gain := g2Gain(dis, p)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestG4Gain(t *testing.T) {
	fmt.Println("TestG4Gain() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := -3.184971
	gain := g4Gain(dis, p)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestChenLoss1(t *testing.T) {
	fmt.Println("TestChen() #1")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 14.0
	loss := ChenLoss(dis, p, 1)
	if math.Abs(loss-known) > tol {
		fmt.Println("loss:  ", loss, "known :", known)
		t.Error()
	}
}

func TestChenLoss2(t *testing.T) {
	fmt.Println("TestChenLoss() #2")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 5.143188
	loss := ChenLoss(dis, p, 2)
	if math.Abs(loss-known) > tol {
		fmt.Println("loss:  ", loss, "known :", known)
		t.Error()
	}
}

func TestInertiaGain(t *testing.T) {
	fmt.Println("TestInertiaGain() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 46.30436
	gain := InertiaGain(dis, p)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestLeastSquaresLoss(t *testing.T) {
	fmt.Println("TestLeastSquaresLoss() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 67.5867
	loss := LeastSquaresLoss(dis, p)
	if math.Abs(loss-known) > tol {
		fmt.Println("loss:  ", loss, "known :", known)
		t.Error()
	}
}

func TestMooreStressLoss(t *testing.T) {
	fmt.Println("TestMooreStressLoss() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 31.87306
	loss := MooreStressLoss(dis, p, p)
	if math.Abs(loss-known) > tol {
		fmt.Println("loss:  ", loss, "known :", known)
		t.Error()
	}
}

func TestVonNeumannStressLoss(t *testing.T) {
	fmt.Println("VonNeumannStressLoss() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 29.26784
	loss := VonNeumannStressLoss(dis, p, p)
	if math.Abs(loss-known) > tol {
		fmt.Println("loss:  ", loss, "known :", known)
		t.Error()
	}
}

func TestMEffGain(t *testing.T) {
	fmt.Println("MEffGain() ")
	dis := Matrix64{
		{0, 0.74871006701335, 0.35961761475178, 0.58792801482487, 0.26208725445091},
		{0.74871006701335, 0, 0.97457186786814, 0.32887529826105, 0.80689982590056},
		{0.35961761475178, 0.97457186786814, 0, 0.70967134221731, 0.16767536449841},
		{0.58792801482487, 0.32887529826105, 0.70967134221731, 0, 0.54770591538625},
		{0.26208725445091, 0.80689982590056, 0.16767536449841, 0.54770591538625, 0},
	}

	n := dis.Rows()
	p := NewIntVector(n)
	for i, _ := range p {
		p[i] = i
	}

	tol := 1e-4
	known := 5.110954
	gain := MEffGain(dis, p, p)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestMEffGain2(t *testing.T) {
	fmt.Println("MEffGain() #2")
	mtx := Matrix64{
		{1, 2.9, 3, 4},
		{5, 6, 7, 8},
		{9, 10, 11, 12},
	}

	n, m := mtx.Dims()
	pRow := NewIntVector(n)
	for i, _ := range pRow {
		pRow[i] = i
	}
	pCol := NewIntVector(m)
	for j, _ := range pCol {
		pCol[j] = j
	}

	tol := 1e-4
	known := 837.0
	gain := MEffGain(mtx, pRow, pCol)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestMEffGain3(t *testing.T) {
	fmt.Println("MEffGain() #3")
	mtx := Matrix64{
		{0.45364017947577, 0.42100047529675, 0.95114873861894, 0.07012724177912, 0.89617779222317},
		{0.28925736644305, 0.11269522365183, 0.04632024699822, 0.69295620080084, 0.59799455897883},
		{0.89358532452024, 0.76837350637652, 0.16236878372729, 0.34871621103957, 0.39031899673864},
		{0.83492388739251, 0.02620215527713, 0.54403042327613, 0.85673258919269, 0.46296340390108},
		{0.58461405150592, 0.96320329094306, 0.58029981213622, 0.24382694764063, 0.15092261251993},
		{0.69918116787449, 0.14178973832168, 0.51502067619003, 0.43019457790069, 0.64512029686011},
	}

	n, m := mtx.Dims()
	pRow := NewIntVector(n)
	for i, _ := range pRow {
		pRow[i] = i
	}
	pCol := NewIntVector(m)
	for j, _ := range pCol {
		pCol[j] = j
	}

	tol := 1e-4
	known := 10.20294
	gain := MEffGain(mtx, pRow, pCol)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}

func TestMooreStressLoss2(t *testing.T) {
	fmt.Println("Test MooreStressLoss() #2")
	mtx := Matrix64{
		{5.6, 3, 4.5, 1.5},
		{4.3, 3, 1.1, 0.1},
		{6.4, 2.8, 5.6, 2.2},
		{6.4, 2.9, 4.3, 1.3},
		{4.9, 3.1, 1.5, 0.2},
		{6.8, 2.8, 4.8, 1.4},
		{6.4, 2.8, 5.6, 2.1},
		{4.4, 3.2, 1.3, 0.2},
		{7.2, 3, 5.8, 1.6},
		{5.4, 3.9, 1.3, 0.4},
		{6.3, 3.4, 5.6, 2.4},
		{5.7, 2.9, 4.2, 1.3},
		{6.4, 3.1, 5.5, 1.8},
		{6.7, 3, 5, 1.7},
		{6.7, 2.5, 5.8, 1.8},
		{6.1, 3, 4.6, 1.4},
		{5.8, 2.6, 4, 1.2},
		{6.7, 3.3, 5.7, 2.1},
		{6.9, 3.1, 5.1, 2.3},
		{5.1, 3.5, 1.4, 0.3},
		{6.3, 2.5, 4.9, 1.5},
		{5.8, 2.7, 3.9, 1.2},
		{6.3, 2.7, 4.9, 1.8},
		{5.1, 3.8, 1.9, 0.4},
		{5.2, 4.1, 1.5, 0.1},
		{5.6, 2.8, 4.9, 2},
		{5.6, 3, 4.1, 1.3},
		{7.2, 3.6, 6.1, 2.5},
		{7.9, 3.8, 6.4, 2},
		{5, 3.4, 1.5, 0.2},
		{6.1, 2.9, 4.7, 1.4},
		{5.7, 4.4, 1.5, 0.4},
		{5.7, 2.8, 4.5, 1.3},
		{4.8, 3, 1.4, 0.1},
		{6.2, 2.2, 4.5, 1.5},
		{5.5, 2.4, 3.8, 1.1},
		{5.8, 2.7, 4.1, 1},
		{5.7, 2.8, 4.1, 1.3},
		{5, 3.6, 1.4, 0.2},
		{7.4, 2.8, 6.1, 1.9},
		{5.5, 2.6, 4.4, 1.2},
		{4.9, 3.6, 1.4, 0.1},
		{4.9, 2.5, 4.5, 1.7},
		{5.5, 2.4, 3.7, 1},
		{4.4, 2.9, 1.4, 0.2},
		{4.6, 3.6, 1, 0.2},
		{5.1, 3.3, 1.7, 0.5},
		{5.2, 3.4, 1.4, 0.2},
		{6, 3, 4.8, 1.8},
		{6.7, 3.3, 5.7, 2.5},
		{5.2, 3.5, 1.5, 0.2},
		{7.2, 3.2, 6, 1.8},
		{5.1, 3.5, 1.4, 0.2},
		{7.7, 3, 6.1, 2.3},
		{6.8, 3.2, 5.9, 2.3},
		{5.9, 3.2, 4.8, 1.8},
		{5.1, 3.8, 1.6, 0.2},
		{4.5, 2.3, 1.3, 0.3},
		{4.9, 3.1, 1.5, 0.1},
		{6.6, 3, 4.4, 1.4},
		{5.6, 2.5, 3.9, 1.1},
		{5.1, 3.4, 1.5, 0.2},
		{6.9, 3.2, 5.7, 2.3},
		{7.1, 3, 5.9, 2.1},
		{4.6, 3.2, 1.4, 0.2},
		{5.9, 3, 5.1, 1.8},
		{5.4, 3.4, 1.5, 0.4},
		{5.5, 2.5, 4, 1.3},
		{7.7, 2.6, 6.9, 2.3},
		{5.6, 2.7, 4.2, 1.3},
		{4.4, 3, 1.3, 0.2},
		{6.3, 3.3, 6, 2.5},
		{5.1, 2.5, 3, 1.1},
		{6.3, 2.8, 5.1, 1.5},
		{5.7, 2.5, 5, 2},
		{6.2, 2.8, 4.8, 1.8},
		{7.7, 3.8, 6.7, 2.2},
		{5.1, 3.7, 1.5, 0.4},
		{4.7, 3.2, 1.3, 0.2},
		{6.1, 2.8, 4.7, 1.2},
		{5.1, 3.8, 1.5, 0.3},
		{6.3, 3.3, 4.7, 1.6},
		{6.4, 3.2, 4.5, 1.5},
		{4.8, 3.4, 1.9, 0.2},
		{5.5, 2.3, 4, 1.3},
		{6.4, 2.7, 5.3, 1.9},
		{5.6, 2.9, 3.6, 1.3},
		{5.7, 3.8, 1.7, 0.3},
		{6.2, 3.4, 5.4, 2.3},
		{4.8, 3.4, 1.6, 0.2},
		{5.4, 3.4, 1.7, 0.2},
		{6.6, 2.9, 4.6, 1.3},
		{4.8, 3, 1.4, 0.3},
		{6.9, 3.1, 4.9, 1.5},
		{6.2, 2.9, 4.3, 1.3},
		{4.7, 3.2, 1.6, 0.2},
		{6.5, 2.8, 4.6, 1.5},
		{6, 2.2, 5, 1.5},
		{5.2, 2.7, 3.9, 1.4},
		{5.8, 2.7, 5.1, 1.9},
		{4.6, 3.1, 1.5, 0.2},
		{5.7, 3, 4.2, 1.2},
		{6.5, 3.2, 5.1, 2},
		{4.9, 3, 1.4, 0.2},
		{6, 2.9, 4.5, 1.5},
		{5.7, 2.6, 3.5, 1},
		{6.5, 3, 5.8, 2.2},
		{5.4, 3, 4.5, 1.5},
		{6.7, 3.1, 4.7, 1.5},
		{6, 2.2, 4, 1},
		{4.9, 2.4, 3.3, 1},
		{5, 2.3, 3.3, 1},
		{6, 2.7, 5.1, 1.6},
		{5, 3.5, 1.6, 0.6},
		{5, 3.3, 1.4, 0.2},
		{6.3, 2.3, 4.4, 1.3},
		{5.8, 2.8, 5.1, 2.4},
		{5.8, 2.7, 5.1, 1.9},
		{6.3, 2.5, 5, 1.9},
		{6.7, 3.1, 5.6, 2.4},
		{6, 3.4, 4.5, 1.6},
		{5, 3.5, 1.3, 0.3},
		{5, 3, 1.6, 0.2},
		{5, 3.4, 1.6, 0.4},
		{6.1, 2.8, 4, 1.3},
		{6.1, 2.6, 5.6, 1.4},
		{5.5, 3.5, 1.3, 0.2},
		{6.9, 3.1, 5.4, 2.1},
		{5.3, 3.7, 1.5, 0.2},
		{5.4, 3.7, 1.5, 0.2},
		{6.8, 3, 5.5, 2.1},
		{7.7, 2.8, 6.7, 2},
		{7.6, 3, 6.6, 2.1},
		{7.3, 2.9, 6.3, 1.8},
		{6.7, 3.1, 4.4, 1.4},
		{5, 3.2, 1.2, 0.2},
		{4.6, 3.4, 1.4, 0.3},
		{5.5, 4.2, 1.4, 0.2},
		{5, 2, 3.5, 1},
		{6.5, 3, 5.5, 1.8},
		{6.4, 3.2, 5.3, 2.3},
		{5.9, 3, 4.2, 1.5},
		{5.4, 3.9, 1.7, 0.4},
		{6.3, 2.9, 5.6, 1.8},
		{6.1, 3, 4.9, 1.8},
		{6.5, 3, 5.2, 2},
		{6.7, 3, 5.2, 2.3},
		{7, 3.2, 4.7, 1.4},
		{5.8, 4, 1.2, 0.2},
		{4.8, 3.1, 1.6, 0.2},
	}

	n, m := mtx.Dims()
	pRow := NewIntVector(n)
	for i, _ := range pRow {
		pRow[i] = i
	}
	pCol := NewIntVector(m)
	for i, _ := range pCol {
		pRow[i] = i
	}

	tol := 1e-4
	known := 22490.72
	gain := MooreStressLoss(mtx, pRow, pCol)
	if math.Abs(gain-known) > tol {
		fmt.Println("gain:  ", gain, "known :", known)
		t.Error()
	}
}
