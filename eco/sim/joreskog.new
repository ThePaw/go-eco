// Copyright 2012 - 2013 The Eco Authors. All rights reserved. See the LICENSE file.

package sim

// Joreskog distance

import (
	"code.google.com/p/go-eco/eco/aux"
	"math"
)

// Joreskog_D returns a Joreskog distance matrix (between rows of the data matrix) for floating-point data. 
func Joreskog_D(data *aux.Matrix) *aux.Matrix {
	// Algorithm from R:ade4
	rows := data.R
	cols := data.C
	out := aux.NewMatrix(rows, rows)

	for i := 0; i < rows; i++ {
		for j := i; j < rows; j++ {
			sum := 0.0
			for k := 0; k < cols; k++ {
				x := data.Get(i, k)
				y := data.Get(j, k)
				sum += (x - y) * (x - y)
			}
			v := math.Sqrt(sum)
			out.Set(i, j, v)
			out.Set(j, i, v)
		}
	}
	return out
}


        dfcov <- cov(df) * (nlig - 1)/nlig
        jor <- diag(dfcov)
        jor[jor == 0] <- 1
        jor <- 1/sqrt(jor)
        df <- t(t(df) * jor)
        d <- unlist(apply(index, 1, fun1))
    
// Covariance matrix between columns of data matrix, two-pass algorithm
// http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Covariance
func Cov(data *DenseMatrix) *DenseMatrix {
	rows := data.Rows()
	cols := data.Cols()
	out := aux.NewMatrix(rows, rows)

	for i := 0; i < cols; i++ {
		for j := i; j < cols; j++ {
			meanX := 0.0
			meanY := 0.0
			// calculate column means
			for k := 0; k < rows; k++ {
				meanX += data.Get(k, i)
				meanY += data.Get(k, j)
			}
			meanX /= float64(rows)
			meanY /= float64(rows)
			// calculate covariance
			cov := 0.0
			for k := 0; k < rows; k++ {
				x := data.Get(k, i)
				y := data.Get(k, j)
				cov += (x - meanX) * (y - meanY)
			}
			cov /= float64(rows)
			out.Set(i, j, cov)
			out.Set(j, i, cov)
		}
	}
	return out
}


// extract the diagonal.
func diag(data *DenseMatrix) *aux.Vector {
	out := aux.NewVector(rows)
	rows := data.Rows()
	for i := 0; i < rows; i++ {
		......